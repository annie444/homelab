---
image:
  repository: matrixdotorg/synapse
  pullPolicy: IfNotPresent

serverName: 'jpeg.gay'
publicServerName: 'matrix.jpeg.gay'
signingkey:
  job:
    enabled: false

    annotations: {}
    #  argocd.argoproj.io/hook: PostSync
    #  argocd.argoproj.io/hook-delete-policy: HookSucceeded

    generateImage:
      repository: matrixdotorg/synapse
      tag: latest
      pullPolicy: IfNotPresent

    publishImage:
      repository: bitnami/kubectl
      tag: latest
      pullPolicy: IfNotPresent

    ## Configure for pod job security policy, setting ovnership of the pod such that
    ## synapse owns the files created by signing key job.
    ## Synapse default UID:GID is 666:666
    ##
    ## Some systems will have a default owner such as root to own the files, synpase
    ## will not be able to access the files in such a case, deppending on permissions.
    podSecurityContext:
      fsGroup: 666
      runAsGroup: 666
      runAsUser: 666
      readOnlyRootFilesystem: false
      fsGroupChangePolicy: "Always"
      allowPrivilegeEscalation: false

    ## Configuration for the container security policy, refer to the above
    ## podSecurityContext for more relevant information.
    ##
    securityContext:
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: false
      fsGroupChangePolicy: "Always"
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 666

  existingSecret: matrix-synapse-signingkey
  existingSecretKey: signing.key

  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 250Mi
  #  requests:
  #    cpu: 100m
  #    memory: 250Mi

config:
  publicBaseurl: 'https://matrix.jpeg.gay'
  logLevel: INFO
  reportStats: false
  turnUris: [
    turns:turn.jepg.gay:5349
    turn:turn.jepg.gay:3478
    turns:turn.jepg.gay:443
  ]
  # turnSecret: ''
  enableRegistration: true
  trustedKeyServers:
    - server_name: matrix.org
  #   verify_keys:
  #     "ed25519:auto": "Noi6WqcDj0QmPxCNQqgezwTlBKrfqehY1u2FyWP9uYw"
  bindAddresses:
    - '::'
    - 0.0.0.0
  extraListeners: []
  extraMainListenerTypes: []
  useStructuredLogging: true

extraConfig:
  allow_profile_lookup_over_federation: true
  allow_device_name_lookup_over_federation: false
  federation:
    client_timeout: 180s
    max_short_retry_delay: 7s
    max_long_retry_delay: 100s
    max_short_retries: 5
    max_long_retries: 20
    destination_min_retry_interval: 30s
    destination_retry_multiplier: 5
    destination_max_retry_interval: 12h
  password_config:
    enabled: true
    localdb_enabled: true
    policy:
       enabled: true
       minimum_length: 14
       require_digit: true
       require_symbol: true
       require_lowercase: true
       require_uppercase: true
  push:
    enabled: true
    include_content: false
    group_unread_count_by_room: true
    jitter_delay: "10s"
  use_presence: true
  enable_search: true
  enable_room_list_search: true
  user_directory:
    enabled: true
    search_all_users: false
    prefer_local_users: true
    show_locked_users: false
  server_notices:
    system_mxid_localpart: notices
    system_mxid_display_name: "Server Notices"
    room_name: "Server Notices"
    room_topic: "Room used by your server admin to notice you of important information"
    auto_join: true
  background_updates:
    background_update_duration_ms: 500
    sleep_enabled: true
    sleep_duration_ms: 1000
    min_batch_size: 1
    default_batch_size: 50
  auto_accept_invites:
    enabled: true
    only_for_direct_messages: true
    only_from_local_users: true
  forget_rooms_on_leave: true
  dynamic_thumbnails: true
  enable_media_repo: false
  enable_registration_captcha: true  
  run_background_tasks_on: generic_background
  stream_writers:
    events:
      - event_streamer
    typing: typing_streamer
    to_device: device_streamer
    account_data: account_streamer
    receipts: receipts_streamer
    presence: presence_streamer
    push_rules: push_streamer
  federation_sender_instances:
    - federation_sender
  outbound_federation_restricted_to:
    - federation_sender
  update_user_directory_from_worker: userdir1
  notify_appservices_from_worker: appservices1
  media_instance_running_background_jobs: media_repository1
  pusher_instances:
    - pusher1
    - pusher2

extraLoggers: {}

extraSecrets: {}

synapse:
  strategy:
    type: RollingUpdate

  annotations: {}

  labels:
    app.kubernetes.io/component: "synapse"

  extraEnv:
    - name: LD_PRELOAD
      value: /usr/lib/x86_64-linux-gnu/libjemalloc.so.2
    - name: SYNAPSE_CACHE_FACTOR
      value: "2"

  extraVolumes: []
  #  - name: spamcheck
  #    flexVolume:
  #      driver: ananace/git-live
  #      options:
  #        repo: https://github.com/company/synapse-module
  #        interval: 1d
  #      readOnly: true
  extraVolumeMounts: []
  #  - name: spamcheck
  #    mountPath: /usr/local/lib/python3.7/site-packages/company

  extraCommands: []
    # - 'apt-get update -yqq && apt-get install patch -yqq'
    # - 'patch -d/usr/local/lib/python3.7/site-packages/synapse -p2 < /synapse/patches/something.patch'

  podSecurityContext:
    fsGroup: 666
    runAsGroup: 666
    runAsUser: 666
    readOnlyRootFilesystem: false
    fsGroupChangePolicy: "Always"
    allowPrivilegeEscalation: false

  securityContext:
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    runAsUser: 666
    readOnlyRootFilesystem: false
    fsGroupChangePolicy: "Always"
    allowPrivilegeEscalation: false

  resources: {}
  #  limits:
  #    cpu: 1000m
  #    memory: 2500Mi
  #  requests:
  #    cpu: 1000m
  #    memory: 2500Mi

  livenessProbe:
    httpGet:
      path: /health
      port: http

  readinessProbe:
    httpGet:
      path: /health
      port: http

  startupProbe:
    failureThreshold: 12
    httpGet:
      path: /health
      port: http

  nodeSelector: {}
  tolerations: []
  affinity: {}

workers:
  default:
    replicaCount: 1
    strategy:
      type: RollingUpdate
    extraConfig: {}
      

    annotations: {}
    ExtraEnv:
      - name: LD_PRELOAD
        value: /usr/lib/x86_64-linux-gnu/libjemalloc.so.2
      - name: SYNAPSE_CACHE_FACTOR
        value: "1.0"

    volumes: []
    volumeMounts: []
    extraCommands: []
      # - 'apt-get update -yqq && apt-get install patch -yqq'
      # - 'patch -d/usr/local/lib/python3.7/site-packages/synapse -p2 < /synapse/patches/something.patch'

    podSecurityContext:
      fsGroup: 666
      runAsGroup: 666
      runAsUser: 666
      readOnlyRootFilesystem: false
      fsGroupChangePolicy: "Always"
      allowPrivilegeEscalation: false

    securityContext:
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: false
      runAsNonRoot: true
      fsGroupChangePolicy: "Always"
      runAsUser: 666
      allowPrivilegeEscalation: false

    resources: {}
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi

    livenessProbe:
      httpGet:
        path: /health
        port: metrics

    readinessProbe:
      httpGet:
        path: /health
        port: metrics

    startupProbe:
      failureThreshold: 6
      httpGet:
        path: /health
        port: metrics

    nodeSelector: {}
    tolerations: []
    affinity: {}

  generic_background:
    enabled: true
    generic: true
    app: generic_worker
    name: generic_background
    listeners: [metrics]

  generic_worker1:
    enabled: true
    generic: true
    app: generic_worker
    name: generic_worker1
    listeners: [client, federation, metrics]
    csPaths:
      ## Sync requests
      - "/_matrix/client/(r0|v3)/sync$"
      - "/_matrix/client/(api/v1|r0|v3)/events$"
      - "/_matrix/client/(api/v1|r0|v3)/initialSync$"
      - "/_matrix/client/(api/v1|r0|v3)/rooms/[^/]+/initialSync$"

      # Federation requests
      - "/_matrix/federation/v1/event/"
      - "/_matrix/federation/v1/state/"
      - "/_matrix/federation/v1/state_ids/"
      - "/_matrix/federation/v1/backfill/"
      - "/_matrix/federation/v1/get_missing_events/"
      - "/_matrix/federation/v1/publicRooms"
      - "/_matrix/federation/v1/query/"
      - "/_matrix/federation/v1/make_join/"
      - "/_matrix/federation/v1/make_leave/"
      - "/_matrix/federation/(v1|v2)/send_join/"
      - "/_matrix/federation/(v1|v2)/send_leave/"
      - "/_matrix/federation/v1/make_knock/"
      - "/_matrix/federation/v1/send_knock/"
      - "/_matrix/federation/(v1|v2)/invite/"
      - "/_matrix/federation/v1/event_auth/"
      - "/_matrix/federation/v1/timestamp_to_event/"
      - "/_matrix/federation/v1/exchange_third_party_invite/"
      - "/_matrix/federation/v1/user/devices/"
      - "/_matrix/key/v2/query"
      - "/_matrix/federation/v1/hierarchy/"

      # Inbound federation transaction request
      - "/_matrix/federation/v1/send/"

      ## Client API requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/createRoom$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/publicRooms$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/joined_members$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/context/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/members$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/state$"
      - "/_matrix/client/v1/rooms/.*/hierarchy$"
      - "/_matrix/client/unstable/org.matrix.msc2716/rooms/.*/batch_send$"
      - "/_matrix/client/unstable/im.nheko.summary/rooms/.*/summary$"
      - "/_matrix/client/(r0|v3|unstable)/account/3pid$"
      - "/_matrix/client/(r0|v3|unstable)/account/whoami$"
      - "/_matrix/client/(r0|v3|unstable)/devices$"
      - "/_matrix/client/versions$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/voip/turnServer$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/event/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/joined_rooms$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/search$"

      ## Encryption requests
      - "/_matrix/client/(r0|v3|unstable)/keys/query$"
      - "/_matrix/client/(r0|v3|unstable)/keys/changes$"
      - "/_matrix/client/(r0|v3|unstable)/keys/claim$"
      - "/_matrix/client/(r0|v3|unstable)/room_keys/"

      ## Registration/login requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/login$"
      - "/_matrix/client/(r0|v3|unstable)/register$"
      - "/_matrix/client/v1/register/m.login.registration_token/validity$"

      ## Event sending requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/redact"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/send"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/state/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/(join|invite|leave|ban|unban|kick)$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/join/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/profile/"

      ## Search Requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/messages$"

      # for all SSO providers
      - "/_matrix/client/(api/v1|r0|v3|unstable)/login/sso/redirect"
      - "/_synapse/client/pick_idp$"
      - "/_synapse/client/pick_username"
      - "/_synapse/client/new_user_consent$"
      - "/_synapse/client/sso_register$"

      # OpenID Connect requests.
      - "/_synapse/client/oidc/callback$"

      # SAML requests.
      - "/_synapse/client/saml2/authn_response$"

      # CAS requests.
      - "/_matrix/client/(api/v1|r0|v3|unstable)/login/cas/ticket$"



  generic_worker2:
    enabled: true
    generic: true
    app: generic_worker
    name: generic_worker2
    listeners: [client, federation, metrics]
    csPaths:
      ## Sync requests
      - "/_matrix/client/(r0|v3)/sync$"
      - "/_matrix/client/(api/v1|r0|v3)/events$"
      - "/_matrix/client/(api/v1|r0|v3)/initialSync$"
      - "/_matrix/client/(api/v1|r0|v3)/rooms/[^/]+/initialSync$"

      # Federation requests
      - "/_matrix/federation/v1/event/"
      - "/_matrix/federation/v1/state/"
      - "/_matrix/federation/v1/state_ids/"
      - "/_matrix/federation/v1/backfill/"
      - "/_matrix/federation/v1/get_missing_events/"
      - "/_matrix/federation/v1/publicRooms"
      - "/_matrix/federation/v1/query/"
      - "/_matrix/federation/v1/make_join/"
      - "/_matrix/federation/v1/make_leave/"
      - "/_matrix/federation/(v1|v2)/send_join/"
      - "/_matrix/federation/(v1|v2)/send_leave/"
      - "/_matrix/federation/v1/make_knock/"
      - "/_matrix/federation/v1/send_knock/"
      - "/_matrix/federation/(v1|v2)/invite/"
      - "/_matrix/federation/v1/event_auth/"
      - "/_matrix/federation/v1/timestamp_to_event/"
      - "/_matrix/federation/v1/exchange_third_party_invite/"
      - "/_matrix/federation/v1/user/devices/"
      - "/_matrix/key/v2/query"
      - "/_matrix/federation/v1/hierarchy/"

      # Inbound federation transaction request
      - "/_matrix/federation/v1/send/"

      ## Client API requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/createRoom$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/publicRooms$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/joined_members$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/context/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/members$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/state$"
      - "/_matrix/client/v1/rooms/.*/hierarchy$"
      - "/_matrix/client/unstable/org.matrix.msc2716/rooms/.*/batch_send$"
      - "/_matrix/client/unstable/im.nheko.summary/rooms/.*/summary$"
      - "/_matrix/client/(r0|v3|unstable)/account/3pid$"
      - "/_matrix/client/(r0|v3|unstable)/account/whoami$"
      - "/_matrix/client/(r0|v3|unstable)/devices$"
      - "/_matrix/client/versions$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/voip/turnServer$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/event/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/joined_rooms$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/search$"

      ## Encryption requests
      - "/_matrix/client/(r0|v3|unstable)/keys/query$"
      - "/_matrix/client/(r0|v3|unstable)/keys/changes$"
      - "/_matrix/client/(r0|v3|unstable)/keys/claim$"
      - "/_matrix/client/(r0|v3|unstable)/room_keys/"

      ## Registration/login requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/login$"
      - "/_matrix/client/(r0|v3|unstable)/register$"
      - "/_matrix/client/v1/register/m.login.registration_token/validity$"

      ## Event sending requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/redact"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/send"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/state/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/(join|invite|leave|ban|unban|kick)$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/join/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/profile/"

      ## Search Requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/messages$"

      # for all SSO providers
      - "/_matrix/client/(api/v1|r0|v3|unstable)/login/sso/redirect"
      - "/_synapse/client/pick_idp$"
      - "/_synapse/client/pick_username"
      - "/_synapse/client/new_user_consent$"
      - "/_synapse/client/sso_register$"

      # OpenID Connect requests.
      - "/_synapse/client/oidc/callback$"

      # SAML requests.
      - "/_synapse/client/saml2/authn_response$"

      # CAS requests.
      - "/_matrix/client/(api/v1|r0|v3|unstable)/login/cas/ticket$"

  generic_worker3:
    enabled: true
    generic: true
    app: generic_worker
    name: generic_worker3
    listeners: [client, federation, metrics]
    csPaths:
      ## Sync requests
      - "/_matrix/client/(r0|v3)/sync$"
      - "/_matrix/client/(api/v1|r0|v3)/events$"
      - "/_matrix/client/(api/v1|r0|v3)/initialSync$"
      - "/_matrix/client/(api/v1|r0|v3)/rooms/[^/]+/initialSync$"

      # Federation requests
      - "/_matrix/federation/v1/event/"
      - "/_matrix/federation/v1/state/"
      - "/_matrix/federation/v1/state_ids/"
      - "/_matrix/federation/v1/backfill/"
      - "/_matrix/federation/v1/get_missing_events/"
      - "/_matrix/federation/v1/publicRooms"
      - "/_matrix/federation/v1/query/"
      - "/_matrix/federation/v1/make_join/"
      - "/_matrix/federation/v1/make_leave/"
      - "/_matrix/federation/(v1|v2)/send_join/"
      - "/_matrix/federation/(v1|v2)/send_leave/"
      - "/_matrix/federation/v1/make_knock/"
      - "/_matrix/federation/v1/send_knock/"
      - "/_matrix/federation/(v1|v2)/invite/"
      - "/_matrix/federation/v1/event_auth/"
      - "/_matrix/federation/v1/timestamp_to_event/"
      - "/_matrix/federation/v1/exchange_third_party_invite/"
      - "/_matrix/federation/v1/user/devices/"
      - "/_matrix/key/v2/query"
      - "/_matrix/federation/v1/hierarchy/"

      # Inbound federation transaction request
      - "/_matrix/federation/v1/send/"

      ## Client API requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/createRoom$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/publicRooms$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/joined_members$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/context/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/members$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/state$"
      - "/_matrix/client/v1/rooms/.*/hierarchy$"
      - "/_matrix/client/unstable/org.matrix.msc2716/rooms/.*/batch_send$"
      - "/_matrix/client/unstable/im.nheko.summary/rooms/.*/summary$"
      - "/_matrix/client/(r0|v3|unstable)/account/3pid$"
      - "/_matrix/client/(r0|v3|unstable)/account/whoami$"
      - "/_matrix/client/(r0|v3|unstable)/devices$"
      - "/_matrix/client/versions$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/voip/turnServer$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/event/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/joined_rooms$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/search$"

      ## Encryption requests
      - "/_matrix/client/(r0|v3|unstable)/keys/query$"
      - "/_matrix/client/(r0|v3|unstable)/keys/changes$"
      - "/_matrix/client/(r0|v3|unstable)/keys/claim$"
      - "/_matrix/client/(r0|v3|unstable)/room_keys/"

      ## Registration/login requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/login$"
      - "/_matrix/client/(r0|v3|unstable)/register$"
      - "/_matrix/client/v1/register/m.login.registration_token/validity$"

      ## Event sending requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/redact"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/send"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/state/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/(join|invite|leave|ban|unban|kick)$"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/join/"
      - "/_matrix/client/(api/v1|r0|v3|unstable)/profile/"

      ## Search Requests
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/messages$"

      # for all SSO providers
      - "/_matrix/client/(api/v1|r0|v3|unstable)/login/sso/redirect"
      - "/_synapse/client/pick_idp$"
      - "/_synapse/client/pick_username"
      - "/_synapse/client/new_user_consent$"
      - "/_synapse/client/sso_register$"

      # OpenID Connect requests.
      - "/_synapse/client/oidc/callback$"

      # SAML requests.
      - "/_synapse/client/saml2/authn_response$"

      # CAS requests.
      - "/_matrix/client/(api/v1|r0|v3|unstable)/login/cas/ticket$"

  ## https://github.com/matrix-org/synapse/blob/develop/docs/workers.md#load-balancing
  event_streamer:
    name: event_streamer
    enabled: true
    generic: true
    app: generic_worker
    listeners: [replication, metrics, client, federation]

  typing_streamer:
    name: typing_streamer
    enabled: true
    generic: true
    app: generic_worker
    listeners: [client, replication, metrics]
    csPaths:
      - "/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/typing"

  device_streamer:
    name: device_streamer
    enabled: true
    generic: true
    app: generic_worker
    listeners: [client, replication, metrics]
    csPaths:
      - "/_matrix/client/(r0|v3|unstable)/sendToDevice/"

  account_streamer:
    name: account_streamer
    enabled: true
    generic: true
    app: generic_worker
    listeners: [client, replication, metrics]
    csPaths:
      - "/_matrix/client/(r0|v3|unstable)/.*/tags"
      - "/_matrix/client/(r0|v3|unstable)/.*/account_data"

  receipts_streamer:
    name: receipts_streamer
    enabled: true
    generic: true
    app: generic_worker
    listeners: [replication, metrics, client]
    csPaths:
      - "/_matrix/client/(r0|v3|unstable)/rooms/.*/receipt"
      - "/_matrix/client/(r0|v3|unstable)/rooms/.*/read_markers"

  presence_streamer:
    name: presence_streamer
    enabled: true
    generic: true
    app: generic_worker
    listeners: [client, replication, metrics]
    csPaths:
      - "/_matrix/client/(api/v1|r0|v3|unstable)/presence/"

  push_streamer:
    name: push_streamer
    enabled: true
    generic: true
    app: generic_worker
    listeners: [client, replication, metrics]
    csPaths:
      - "/_matrix/client/(api/v1|r0|v3|unstable)/pushrules/"

  federation_sender:
    name: federation_sender
    enabled: true
    generic: true
    app: generic_worker
    listeners: [federation, replication, metrics]

  userdir1:
    enabled: true
    generic: true
    app: generic_worker
    name: userdir1
    listers: [client, metrics]
    csPaths:
      - "/_matrix/client/(r0|v3|unstable)/user_directory/search$"

  appservices1:
    app: generic_worker
    enabled: true
    generic: true
    name: appservices1
    listeners: [metrics]

  pusher1:
    enabled: true
    generic: true
    app: generic_worker
    name: pusher1
    listeners: [metrics]

  pusher2:
    enabled: true
    generic: true
    app: generic_worker
    name: pusher2
    listerners: [metrics]

  media_repository1:
    name: media_repository1
    enabled: true
    generic: false
    app: media_repository
    listeners: [media, metrics, client, federation]
    paths:
      - "/_matrix/media/.*"
      - "/_matrix/client/v1/media/.*"
      - "/_matrix/federation/v1/media/.*"
      - "/_synapse/admin/v1/purge_media_cache$"
      - "/_synapse/admin/v1/room/.*/media.*$"
      - "/_synapse/admin/v1/user/.*/media.*$"
      - "/_synapse/admin/v1/media/.*$"
      - "/_synapse/admin/v1/quarantine_media/.*$"
      - "/_synapse/admin/v1/users/.*/media$"

  media_repository2:
    name: media_repository2
    enabled: true
    generic: false
    app: media_repository
    listeners: [media, metrics, client, federation]
    csPaths:
      - "/_matrix/media/"
      - "/_synapse/admin/v1/purge_media_cache$"
      - "/_synapse/admin/v1/room/.*/media"
      - "/_synapse/admin/v1/user/.*/media"
      - "/_synapse/admin/v1/media/"
      - "/_synapse/admin/v1/quarantine_media/"
      - "/_synapse/admin/v1/users/.*/media$"
      - "/_matrix/media/.*"
      - "/_matrix/client/v1/media/.*"
      - "/_matrix/federation/v1/media/.*"

## This will set up a Lighttpd server to respond to any
## /.well-known/matrix/server requests, to make federation possible without
## adding SRV-records to DNS.
##
wellknown:
  enabled: true
  replicaCount: 1

  # Lighttpd does not bind on IPv6 by default, although this is required in
  # Ipv6-only clusters.
  useIpv6: false

  ## The host and port combo to serve on .well-known/matrix/server.
  ##
  server:
    m.server: matrix.jpeg.gay:443

  ## Data to serve on .well-known/matrix/client.
  ##
  client:
    m.homeserver:
      base_url: https://matrix.jpeg.gay
    org.matrix.msc3575.proxy:
        url: https://syncv3.jpeg.gay
    

  ## Configuration for the wellknown service.
  ##
  service:
    type: LoadBalancer
    port: 80

  ## Extra data objects to serve under .well-known/matrix/<data>
  ## Dictionaries will be JSON converted, plain strings will be served as they are
  ##
  extraData:
    ## MSC1929 example;
    support:
      admins:
        - matrix_id: '@annie444:jpeg.gay'
          email_address: 'annie.ehler.4@gmai.com'
          role: 'admin'
            # support_page: 'https://example.com/support'

  ## A custom htdocs path, useful when running another image.
  ##
  htdocsPath: /var/www/localhost/htdocs

  ## The lighttpd image to run.
  ##
  image:
    repository: ghcr.io/rtsp/docker-lighttpd
    tag: latest
    pullPolicy: Always

    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName

  ## Configuration for the pod security policy.
  ##
  podSecurityContext:
    fsGroup: 101
    runAsGroup: 101
    runAsUser: 100
    readOnlyRootFilesystem: false
    fsGroupChangePolicy: "Always"
    allowPrivilegeEscalation: false

  ## Configuration for the container security policy.
  ##
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    runAsUser: 100
    fsGroupChangePolicy: "Always"

  ## Resource configuration to apply to the well-known server.
  ##
  resources: {}
  #  limits:
  #    cpu: 5m
  #    memory: 15Mi
  #  requests:
  #    cpu: 5m
  #    memory: 15Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

postgresql:
  enabled: false

externalPostgresql:
  port: 5432
  username: synapse
  database: synapse

redis:
  enabled: false

externalRedis:
  port: 6379
  dbid: 0

persistence:
  enabled: true
  existingClaim: synapse-data
  #accessMode: ReadWriteMany
  #size: 50Gi

volumePermissions:
  enabled: false

  uid: 666
  gid: 666

  image:
    repository: alpine
    tag: latest
    pullPolicy: Always

  resources: {}
  # resources:
  #   requests:
  #     memory: 128Mi
  #     cpu: 100m

service:
  type: LoadBalancer
  port: 8008
  targetPort: http

ingress:
  enabled: true

  traefikPaths: false

  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$mxid_localpart"
  csHosts:
    - matrix.jpeg.gay

  ## Additional hosts to add to the ingress configuration for handling
  ## Server-to-Server API requests.
  ##
  ## NB; config.serverName is included if includeServerName is set. (default)
  ##
  hosts:
    - matrix.jpeg.gay

  ## Additional hosts to add to the ingress configuration for handling
  ## well-known requests.
  ##
  ## NB; config.serverName is included if includeServerName is set. (default)
  ##
  wkHosts: 
    - matrix.jpeg.gay

  ## Additional paths to add to the Server-to-Server ingress blocks, will be
  ## inserted before the /_matrix catch-all path.
  ##
  paths:
  #  # K8s 1.19+
    - path: /_matrix/media
      pathType: Prefix
      backend:
        service:
          name: matrix-media-repo
          port: 
            number: 8000
    # K8s <1.19
    #- path: /_matrix/media
    #  backend:
    #    serviceName: matrix-media-repo
    #    servicePort: 8000

  ## Additional paths to add to the Client-to-Server ingress blocks, will be
  ## inserted before the /_matrix and /_synapse catch-all paths.
  ##
  csPaths:
  #  # K8s 1.19+
    - path: /_matrix/media
      pathType: Prefix
      backend:
        service:
          name: matrix-media-repo
          port:
            number: 8000
              #              ## K8s <1.19
              #    - path: /_matrix/media
              #      backend:
              #        serviceName: matrix-media-repo
              #        servicePort: 8000

  ## Should the /_synapse path be included in the ingress, admin APIs are
  ## provided under this path.
  ##
  includeUnderscoreSynapse: true

  ## Should config.serverName be included in the list of ingress paths, can be
  ## set to false if the main domain is managed in some external way.
  ##
  includeServerName: true

  ## TLS configuration to include in the ingress configuration
  ##
  tls:
   - secretName: matrix-tls
     hosts:
       - jpeg.gay
       - matrix.jpeg.gay

  ## Set the name of the IngressClass cluster resource (optional)
  ## https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#IngressSpec
  className: nginx

## Specifies whether a service account should be created, and annotations to add.
##
serviceAccount:
  create: true
  annotations: {}
    # eks.amazonaws.com/role-arn: arn:aws:iam::000000000000:role/matrix-synapse
  # name: non-default-service-name

